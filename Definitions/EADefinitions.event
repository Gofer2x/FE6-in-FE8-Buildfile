//Move unit at specified coordinate
//Credit Pikmin1211
#define MoveByCoords(speed, srcX, srcY, destX, destY) "SVAL sB srcX|(srcY<<16); MOVE speed UnitAtCoordsSlotB [destX, destY]"

#define LoadHardReinforcements(unitPtr) "SMOV 0x2 (unitPtr|0x8000000); CALL $9EE29C"
#define HardReinforcementEvent(unitPtr) "SMOV 0x2 (unitPtr|0x8000000); CALL $9EE29C; EVBIT_T 0x7; ENDA"

#define AreaEvent(eventID,EventPointer,corner1x,corner1y,corner2x,corner2y)   "AREA eventID EventPointer [corner1x,corner1y] [corner2x,corner2y]" 

#define CMON "EVBIT_T 0x09"
#define CMOF "EVBIT_F 0x09"

#define PlayerInRange "SVAL s2 0 ; CALL 0x89EE1B8"

#define SetAI(unitid,ai1,ai2,ai3,ai4) "SVAL 0x1 ai1|(ai2<<8)|(ai3<<16)|(ai4<<24); CHAI unitid"
#define SetAI(x,y,ai1,ai2,ai3,ai4) "SVAL 0x1 ai1|(ai2<<8)|(ai3<<16)|(ai4<<24); CHAI [x,y]"
#define SetAI(unitid,ai1,ai2)"SVAL 0x1 ai1|(ai2<<8); CHAI unitid"
#define SetAI(x,y,ai1,ai2) "SVAL 0x1 ai1|(ai2<<8); CHAI [x,y]"

//door but with event flag
#define Door(EventFlag, DoorX, DoorY) "DOOR EventFlag [DoorX, DoorY] 0x12"

//door but with event flag and event pointer
#define DoorWithEvent(EventPointer,doorX,doorY) "DOOR 0 EventPointer [doorX,doorY] 0x12"

#define EndEvent "EVBIT_T 0x7 ; ENDA"

#define FlagON(flag) "ENUT flag"
#define FlagOFF(flag) "ENUF flag"

#define CheckFlag(flag) "CHECK_EVENTID flag"

#define PlayMusic(music) "MUSC music"

#define SwitchMusic(music) "MUSS music"
#define RestoreMusic "MURE 0x5"

#define QuieterMusic "MUSI;"
#define UnquieterMusic "MUNO;"

#define FadeOutMusic "MUSCMID 0x7FFF"
#define PlaySound(sound) "SOUN sound"

#define FadeOut "FADU 60"
#define FadeIn "FADI 60"

#define ClearAll "CLEA 0x0; CLEE 0x0; CLEN 0x0"

#define GotoPrepScreenNoENDA "CALL $591FD8"

//don't feel like dealign with world map events rn
MESSAGE cuz i dont feel like dealing with map events rn
#define MoveToChapter(chapter) "MNC2 chapter"

#define DesertTreasure(item,id) "BYTE $28 $33 $FF $FF $20 $06 $C2 $00 $40 $05 $03 $00 ; BYTE item ; BYTE $00 $00 $00 $40 $0A $00 $00 $1C $E6 $9E $08 $41 $0C ; SHORT id ; BYTE $0C $00 $00 $00 $40 $0A $00 $00 $D4 $E1 $9E $08 $20 $08 ; SHORT id ; BYTE $28 $02 $07 $00 $20 $01 $00 $00"

